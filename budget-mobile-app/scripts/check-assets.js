#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const distPath = path.join(__dirname, '..', 'dist');

function checkAssets() {
  console.log('=== V√âRIFICATION DES ASSETS ===');
  console.log('Dist path:', distPath);
  
  try {
    // V√©rifier si le dossier dist existe
    if (!fs.existsSync(distPath)) {
      console.error('‚ùå Le dossier dist n\'existe pas !');
      console.log('üí° Solution: Ex√©cutez "npm run build" pour cr√©er les assets');
      return false;
    }
    
    console.log('‚úÖ Dossier dist trouv√©');
    
    // V√©rifier index.html
    const indexPath = path.join(distPath, 'index.html');
    if (!fs.existsSync(indexPath)) {
      console.error('‚ùå index.html manquant !');
      return false;
    }
    
    console.log('‚úÖ index.html trouv√©');
    
    // V√©rifier le dossier assets
    const assetsPath = path.join(distPath, 'assets');
    if (!fs.existsSync(assetsPath)) {
      console.error('‚ùå Dossier assets manquant !');
      return false;
    }
    
    console.log('‚úÖ Dossier assets trouv√©');
    
    // Lister les assets
    const assets = fs.readdirSync(assetsPath);
    console.log(`üìÅ Nombre d'assets trouv√©s: ${assets.length}`);
    
    // V√©rifier les types de fichiers
    const cssFiles = assets.filter(file => file.endsWith('.css'));
    const jsFiles = assets.filter(file => file.endsWith('.js'));
    const otherFiles = assets.filter(file => !file.endsWith('.css') && !file.endsWith('.js'));
    
    console.log(`üìÑ Fichiers CSS: ${cssFiles.length}`);
    console.log(`üìÑ Fichiers JS: ${jsFiles.length}`);
    console.log(`üìÑ Autres fichiers: ${otherFiles.length}`);
    
    // Afficher quelques exemples
    if (cssFiles.length > 0) {
      console.log('üìÑ Exemples CSS:', cssFiles.slice(0, 3));
    }
    
    if (jsFiles.length > 0) {
      console.log('üìÑ Exemples JS:', jsFiles.slice(0, 3));
    }
    
    // V√©rifier la taille des fichiers
    console.log('\nüìä Taille des fichiers:');
    assets.slice(0, 5).forEach(file => {
      const filePath = path.join(assetsPath, file);
      const stats = fs.statSync(filePath);
      const sizeKB = (stats.size / 1024).toFixed(2);
      console.log(`  ${file}: ${sizeKB} KB`);
    });
    
    // V√©rifier le contenu d'index.html
    console.log('\nüîç V√©rification d\'index.html:');
    const indexContent = fs.readFileSync(indexPath, 'utf8');
    
    // V√©rifier les r√©f√©rences aux assets
    const assetReferences = indexContent.match(/assets\/[^"'\s]+/g) || [];
    console.log(`üìÑ R√©f√©rences aux assets dans index.html: ${assetReferences.length}`);
    
    // V√©rifier si les assets r√©f√©renc√©s existent
    const missingAssets = assetReferences.filter(ref => {
      const assetPath = path.join(distPath, ref);
      return !fs.existsSync(assetPath);
    });
    
    if (missingAssets.length > 0) {
      console.error('‚ùå Assets manquants r√©f√©renc√©s dans index.html:');
      missingAssets.forEach(asset => console.error(`  - ${asset}`));
    } else {
      console.log('‚úÖ Tous les assets r√©f√©renc√©s existent');
    }
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
    return false;
  }
}

function suggestSolutions() {
  console.log('\nüí° Solutions possibles:');
  console.log('1. Reconstruire l\'application: npm run build');
  console.log('2. Nettoyer le cache: npm run clean');
  console.log('3. V√©rifier les variables d\'environnement');
  console.log('4. V√©rifier la configuration Vite');
  console.log('5. Red√©marrer le serveur de production');
}

// Ex√©cuter la v√©rification
const success = checkAssets();
if (!success) {
  suggestSolutions();
} 